openapi: 3.0.0
info:
  title: API
  description: Combined API documentation for Users, Menus, and Sessions
  version: 1.0.0

servers:
  - url: http://localhost:3000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Users
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        gender:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateUserInput:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        gender:
          type: string

    UpdateUserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        gender:
          type: string

    # Menus
    Menu:
      type: object
      properties:
        id:
          type: integer
        itemName:
          type: string
        itemDescription:
          type: string
        price:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateMenuInput:
      type: object
      required:
        - name
        - price
      properties:
        itemName:
          type: string
        itemDescription:
          type: string
        price:
          type: number

    UpdateMenuInput:
      type: object
      properties:
        itemName:
          type: string
        itemDescription:
          type: string
        price:
          type: number

    # Sessions
    Session:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        isDeleted:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateSessionInput:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
        isDeleted:
          type: boolean
          default: false

    UpdateSessionInput:
      type: object
      properties:
        userId:
          type: integer
        isDeleted:
          type: boolean

paths:
  # Users
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Create new user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInput"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      summary: Update a user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInput"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      summary: Delete a user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User deleted

  /users/upsert:
    put:
      summary: Upsert a single user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInput"
      responses:
        "200":
          description: User upserted successfully

  /users/bulk-upsert:
    put:
      summary: Bulk upsert multiple users
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateUserInput"
      responses:
        "200":
          description: Users upserted successfully

  /users/filter:
    post:
      summary: Get paginated and filtered users
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  default: 1
                limit:
                  type: integer
                  default: 10
                search:
                  type: string
                  description: Search keyword for name/email
      responses:
        "200":
          description: Paginated list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"

  # Menus
  /menu:
    get:
      summary: Get all menus
      tags:
        - Menus
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of menus
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Menu"
    post:
      summary: Create new menu
      tags:
        - Menus
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMenuInput"
      responses:
        "201":
          description: Menu created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"

  /menu/filter:
    post:
      summary: Filter menus
      tags:
        - Menus
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Filter by menu name
                minPrice:
                  type: number
                maxPrice:
                  type: number
      responses:
        "200":
          description: Filtered menus
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Menu"

  /menu/{id}:
    get:
      summary: Get menu by ID
      tags:
        - Menus
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Menu object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "404":
          description: Menu not found
    put:
      summary: Update a menu
      tags:
        - Menus
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMenuInput"
      responses:
        "200":
          description: Menu updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
    delete:
      summary: Delete a menu
      tags:
        - Menus
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Menu deleted

  # Sessions
  /sessions:
    get:
      summary: Get all sessions
      tags:
        - Sessions
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Session"
    post:
      summary: Create new session
      tags:
        - Sessions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionInput"
      responses:
        "201":
          description: Session created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"

  /sessions/{id}:
    get:
      summary: Get session by ID
      tags:
        - Sessions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Session object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "404":
          description: Session not found
    put:
      summary: Update a session
      tags:
        - Sessions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSessionInput"
      responses:
        "200":
          description: Session updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
    delete:
      summary: Delete a session
      tags:
        - Sessions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Session deleted

tags:
  - name: Users
    description: User management APIs
  - name: Menus
    description: Menu management APIs
  - name: Sessions
    description: Session management APIs
